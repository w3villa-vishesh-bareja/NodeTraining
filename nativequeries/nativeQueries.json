{
    "getUser" : "SELECT id , name , unique_id , next_action , email, register_complete , password , email_verified , isAdmin , isActive FROM users WHERE email = ? OR unique_id = ? OR name = ?",

    "createUser": "INSERT INTO users (name, email, password , phone_number,verified_methods) VALUES (?, ?, ?, ?, ?)",

    "updateUserEmail":"UPDATE users SET verified_methods = IF(verified_methods IS NULL, 'EMAIL', CONCAT(verified_methods, ',EMAIL')) WHERE email = ?",

    "createUserWithSocial": "INSERT INTO users ( email, password, email_verified, name , firstname , lastname , profile_image_url , isSocial , next_action , unique_id , register_complete) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ? , (UUID()) , true)",

    "addSocialUser": "INSERT INTO social_logins (userID, provider, providerId) VALUES (?, ?, ?) ",

    "InsertIntoEmailVerification": "INSERT INTO email_verifications (user_id , verificationToken ) VALUES (? , ?)",

    "checkFromVerification" : "SELECT  e.isVerified , e.expires_at  , s.id AS soft_registration_id , s.name , s.email , s.phone_number , s.password FROM email_verifications AS e JOIN soft_registrations AS s ON e.soft_registration_id = s.id WHERE  e.verificationToken = ?",

    "updateToken": "UPDATE email_verifications SET expires_at = (CURRENT_TIMESTAMP + INTERVAL 10 MINUTE), verificationToken = ? WHERE user_id = ?",

    "updateVerified": "UPDATE email_verifications SET isVerified = ? WHERE user_id = ?",

    "getSoftUserWithEMail": "SELECT id, name , email, phone_number, password From soft_registrations WHERE email = ?",

    "getSoftUserWithNumber": "SELECT id, name , email, phone_number, password From soft_registrations WHERE phone_number = ?",

    "insertIntoSoftRegister":"INSERT INTO soft_registrations (name , email , phone_number , password) VALUES (?, ?, ?, ?)",

    "checkVerificationStatus": "SELECT o.isVerified FROM soft_registrations AS s JOIN otp_verifications AS o ON o.soft_registration_id = s.id WHERE  s.phone_number = ?",

    "checkVerificationStatusForEmail": "SELECT e.isVerified , e.expires_at FROM soft_registrations AS s JOIN email_verifications AS e ON e.soft_registration_id = s.id WHERE  s.email = ?",

    "insertInOtp": "INSERT INTO otp_verifications (user_id , phone_number , otp) VALUES (?, ?, ?)",

    "updateOtp": "UPDATE otp_verifications SET otp = ? , phone_number = ? , expires_at = (CURRENT_TIMESTAMP + INTERVAL 10 MINUTE), last_seen_at = CURRENT_TIMESTAMP WHERE user_id = ?",

    "getOtp": "SELECT otp FROM otp_verifications WHERE phone_number = ?",

    "verifyUserOtp": "UPDATE otp_verifications SET isVerified = ? WHERE user_id = ?",

    "deleteFromSoftRegister": "DELETE FROM soft_registrations WHERE phone_number = ? OR email = ? ",

    "insertInUsers": "INSERT INTO users (name , email , phone_number , password) VALUES (?, ?, ?, ?) ",

    "getVerifiedMethods":"SELECT verified_methods FROM users WHERE email = ? OR phone_number = ?",

    "updateVerifiedMethodsWithOTP": "UPDATE users SET verified_methods = IF(verified_methods IS NULL, 'OTP', CONCAT(verified_methods, ',OTP')) WHERE phone_number = ?",

    "insertNewUser": "INSERT INTO users (email, next_action, unique_id) VALUES (?, ?, UUID())",

    "getFromVerification" : "SELECT * FROM email_verifications WHERE verificationToken = ?",

    "verifyUserEmail" :"UPDATE users SET email_verified = ?, next_action = ? , password = ? WHERE unique_id = ?",

    "insertPassword":"UPDATE users SET password = ? WHERE unique_id= ? ",

    "getOtpVerificationStatus":"SELECT isVerified  FROM otp_verifications WHERE user_id = ?",
    
    "getOtpExpiry": "SELECT expires_at , otp FROM otp_verifications WHERE user_id = ?",

    "otpVerified" : "UPDATE users SET otp_verified = ? , next_action = ? ,phone_number = ? WHERE unique_id = ?",

    "insertName" : "UPDATE users SET name = ? , firstname = ? , lastname = ? , next_action = ? WHERE email =?",

    "updateProfileImage": "UPDATE users SET profile_image_url =? , next_action = ? , register_complete = true WHERE email = ?",

    "getProfile":"SELECT id ,name , firstname , lastname , phone_number , email , unique_id , profile_image_url , tier , isAdmin From users WHERE unique_id= ? OR email = ?" ,

    "checkName" : "SELECT name, id FROM users WHERE name LIKE ?",

    "createSimpleTask" : "INSERT INTO tasks (title , created_by , deadline , description , type , unique_id) VALUES (?, ?, ?, ?, ?, UUID())",

    "deleteSimpleTaskSingle" : "DELETE FROM tasks WHERE id = ? AND created_by = ? AND type = ?",

    "getSimpleTasks" : "SELECT * FROM tasks WHERE created_by = ? AND type = ?",

    "createProject": "INSERT INTO projects (name , type , owner , description , deadline , unique_id) VALUES (?, ?, ?, ?, ?, UUID())",

    "insertInProjectMember":"INSERT INTO project_members (project_id,user_id , role) VALUES(?,?,?)",

    "createInvitation":"INSERT INTO invitations(invited_by , invitation_to , project_id) VALUES (?, ?, ?)",

    "fetchInviations": "SELECT i.*, p.name FROM invitations i JOIN projects p ON i.project_id = p.id WHERE invitation_to = ? AND is_accepted = false",

    "acceptNotifications" : "UPDATE invitations SET is_accepted = true WHERE invitation_to= ? AND project_id = ?",

    "addUserInProject": "UPDATE projects SET users = IF(users IS NULL OR users = 'null' OR users = '[]', JSON_ARRAY(?), JSON_ARRAY_APPEND(users, '$', ?)) WHERE id = ?",

    "getProjectType" : "SELECT type, owner FROM projects WHERE id = ?",

    "getUserRole" : "SELECT pm.role from project_members pm JOIN projects p ON pm.project_id = p.id  WHERE p.id = ? AND pm.user_id = ?",

    "getProjects" : "SELECT p.unique_id, p.name, p.owner, pm.role, p.deadline, p.description, p.is_extended, p.is_early, p.type, p.status, u.name AS owner_name FROM project_members pm JOIN projects p ON pm.project_id = p.id JOIN users u ON p.owner = u.id WHERE pm.user_id = ?",

    "getAcceptedStatus" : "SELECT is_accepted from invitations where invitation_to = ? AND project_id = ?",

    "addUserLevel":"INSERT INTO project_members (user_id ,project_id) VALUES (?, ?)",

    "checkUserAndId":"SELECT * FROM projects WHERE unique_id= ?",

    "getUserDetails": "SELECT  u.id, u.name, u.email, u.tier, u.profile_image_url, pm.role, pm.joined_at FROM project_members pm JOIN users u ON pm.user_id = u.id WHERE pm.project_id = ?",

    "getTasksForProject" : "SELECT * FROM tasks WHERE project_id = ?",

    "updateUserSubscription": "UPDATE users SET tier = ? WHERE id = ?",

    "checkTier": "SELECT tier FROM users WHERE id = ?",

    "createProjectTask": "INSERT INTO tasks (title , created_by , deadline , description , type , project_id , assigned_to, unique_id) VALUES (?, ?, ?, ?, ?, ?, ?, UUID())",

    "checkIfAssigned": "SELECT assigned_to FROM tasks WHERE id = ? ",

    "changeStatus": "UPDATE tasks SET status = ? WHERE id = ?",

    "getTasks": "SELECT * FROM tasks WHERE project_id = ? ",

    "checkIfParent": "SELECT p.id, p.title FROM tasks as t JOIN tasks as p ON t.id = p.parent_task_id WHERE t.id = ?",

    "deleteTask": "DELETE FROM tasks WHERE id = ?",

    "changeAssignedUser": "UPDATE tasks SET assigned_to = ? WHERE id = ?",

    "getProjectMembers": "SELECT * FROM project_members WHERE project_id = ?",

    "deleteMultipleTasks": "DELETE FROM tasks WHERE id IN (?) AND created_by = ? AND type = ?",

    "rejectInvitation": "UPDATE invitations SET is_accepted = false WHERE invitation_to= ? AND project_id = ?",

    "deleteProject": "DELETE FROM projects WHERE unique_id = ?",

    "getGroupProject" : "SELECT * FROM projects WHERE owner = ? AND type = ?",

    "blockUser": "UPDATE users set isActive = ? WHERE id = ? "

}
